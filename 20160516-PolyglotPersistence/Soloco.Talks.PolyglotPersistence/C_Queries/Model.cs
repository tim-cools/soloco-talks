using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Soloco.Talks.PolyglotPersistence.Infrastructure;

namespace Soloco.Talks.PolyglotPersistence.C_Queries
{
    public class Route
    {
        private readonly List<Stop> _stops = new List<Stop>();

        public Guid ID { get; set; }
        public RouteStatus Status { get; private set; }
        public DateTime Date { get; private set; }

        public IEnumerable Stops => _stops;

        public void Plan(DateTime date)
        {
            if (date < DateTime.Today.AddDays(1))
            {
                throw new InvalidOperationException("Route can only plan from tomorrow.");
            }

            Status = RouteStatus.Planned;
            Date = date;
        }

        public void AddStop(string name, Position position)
        {
            _stops.Add(new Stop(name, position));
        }

        public override string ToString()
        {
            return $"ID: {ID}, Status: {Status}, Date: {Date}{_stops.AsString()}";
        }
    }

    public enum RouteStatus
    {
        Created,
        Planned,
        Driving,
        Stopped
    }

    public class Stop
    {
        public string Name { get; }
        public Position Position { get; }

        public Stop(string name, Position position)
        {
            Name = name;
            Position = position;
        }

        public override string ToString()
        {
            return $"Name: {Name}, Position: {Position}";
        }
    }

    public class Position
    {
        public decimal Latitude { get; }
        public decimal Longitude { get; }

        public Position(decimal longitude, decimal latitude)
        {
            Longitude = longitude;
            Latitude = latitude;
        }

        public override string ToString()
        {
            return $"Latitude: {Latitude}, Longitude: {Longitude}";
        }
    }

    public class Dinner
    {
        /// <summary>
        /// This is the unique numeric id for each dinner
        /// </summary>
        /// <remarks>
        /// This property is automatically generated by marten's HiLo key algorithm
        /// See: https://github.com/JasperFx/marten/blob/master/documentation/documentation/documents/document_ids.md#hilo-sequences
        /// </remarks>
        public int Id { get; set; }

        /// <summary>
        /// This property is a shortcut to creating the REST url for this dinner
        /// </summary>
        [JsonIgnore]
        public string DinnerID => $"dinners/{Id}";

        public string Title { get; set; }

        public DateTime EventDate { get; set; }

        public string Description { get; set; }

        public string HostedBy { get; set; }

        public string ContactPhone { get; set; }

        public string Address { get; set; }

        public string Country { get; set; }

        public double Latitude { get; set; }

        public double Longitude { get; set; }

        public string HostedById { get; set; }

        public virtual ICollection<RSVP> RSVPs { get; set; }

        public bool IsHostedBy(string userName)
        {
            return String.Equals(HostedById ?? HostedBy, userName, StringComparison.Ordinal);
        }

        public bool IsUserRegistered(string userName)
        {
            return RSVPs.Any(r => r.AttendeeNameId == userName || (r.AttendeeNameId == null && r.AttendeeName == userName));
        }

        public LocationDetail Location
        {
            get
            {
                return new LocationDetail() { Latitude = Latitude, Longitude = Longitude, Title = Title, Address = Address };
            }
            set
            {
                Latitude = value.Latitude;
                Longitude = value.Longitude;
                Title = value.Title;
                Address = value.Address;
            }
        }

        public DateTime LastModified { get; set; }
    }
    public class RSVP
    {
        public int RsvpID { get; set; }
        public int DinnerID { get; set; }
        public string AttendeeName { get; set; }
        public string AttendeeNameId { get; set; }
    }

    public class LocationDetail
    {
        public double Latitude;
        public double Longitude;
        public string Title;
        public string Address;
    }
}